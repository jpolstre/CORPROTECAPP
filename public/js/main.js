// Generated by CoffeeScript 1.8.0
(function() {
  var AuxObjAttribs2, Chat, NroFactura, NroRecibo, User, allUsers, clientes, clientesContrato, codigoComprasGlobalJq, codprod, contEstaJq, ctnComprasJq, ctnMainJq, ctnVentasJq, divRowsJq, drawEstadisticasCompras, drawEstadisticasVentas, formHtml, formHtmlEditarItem2, formHtmlEditarServicio, getCodProd, headerTitleJq, htmlFormCobrar, htmlProveedor, item, iva, ivaCompraJq, ivaJqVenta, lisJq, msgCarritoJq2, numItemsJq2, proveedores, serializeForm2, tablaAlmacen, tablaVentasRep, txt2, _i, _len;

  jQuery.fn.dataTableExt.oApi.fnGetDisplayRows = function(oSettings) {
    var i, rowData, rowsDataDisplay, _i, _len, _ref;
    rowsDataDisplay = [];
    _ref = oSettings.aiDisplay;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      rowData = oSettings.aoData[i]._aData;
      rowsDataDisplay.push(rowData);
    }
    return rowsDataDisplay;
  };

  clientes = [];

  proveedores = [];

  codprod = void 0;

  getCodProd = function() {
    return 'ITEM-' + codprod;
  };

  tablaAlmacen = void 0;

  ivaJqVenta = void 0;

  ivaCompraJq = void 0;

  iva = void 0;

  NroFactura = void 0;

  NroRecibo = void 0;

  ctnComprasJq = $('div#comprar-ctn');

  numItemsJq2 = ctnComprasJq.find('span#num-items');

  msgCarritoJq2 = ctnComprasJq.find('div#msg-carrito');

  AuxObjAttribs2 = ['series', 'codigo', 'descripcion', 'costo', 'cantidad', 'utilidad', 'garantia', 'subtotal'];

  htmlProveedor = '<form class="form-horizontal">';

  htmlProveedor += "<div class='form-group'> <label for='proveedor' class='col-md-3  control-label'>Proveedor:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='proveedor' name='proveedor' autocomplete='off' validar='requiere'> </div> </div>";

  htmlProveedor += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  formHtmlEditarItem2 = '<form class="form-horizontal">';

  for (_i = 0, _len = AuxObjAttribs2.length; _i < _len; _i++) {
    item = AuxObjAttribs2[_i];
    if (item !== 'subtotal') {
      formHtmlEditarItem2 += "<div class='form-group'> <label for='" + item + "' class='col-md-3  control-label'>" + item + ":</label> <div class='col-md-7'> <input type='text' class='form-control upper' id='" + item + "' name='" + item + "' validar='requiere'> </div> </div>";
    }
  }

  formHtmlEditarItem2 += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  codigoComprasGlobalJq = void 0;

  $(document).ready(function() {
    var btnClearJq, btnSearchJq, buttonTitleJq, cantidadJq, contTablaComJq, contTablaRegJq, costoJq, formCompraJq, formIvaJq, imputsFormCompraJq, inputSearchJq, itemElegido, precioFacJq, precioRecJq, procAddToCard, procSeries, serializeForm, showHideMenujq, swPorComprar, tablaCompras, tablaComprasJq, tablaRegistrados, tablaRegistradosJq, tableTitleJq, titlePanelJq, utilidadJq, valArray, validador;
    valArray = {
      codigo: ctnComprasJq.find('input#codigo'),
      descripcion: ctnComprasJq.find('textarea#descripcion'),
      costo: ctnComprasJq.find('input#costo'),
      utilidad: ctnComprasJq.find('input#utilidad'),
      garantia: ctnComprasJq.find('input#garantia')
    };
    codigoComprasGlobalJq = valArray.codigo;
    swPorComprar = false;
    io.on('compras:shopp', function(data) {
      if (data.newIva) {
        iva = data.newIva;
        ivaJqVenta.val(iva);
        ivaCompraJq.val(iva);
      }
      if (!data.productoReg) {
        console.log('no registrado');
        codprod = data.codprod * 1;
        codprod++;
        valArray.codigo.val(getCodProd());
      }
      drawEstadisticasCompras();
      tablaRegistrados.api().ajax.reload();
      tablaCompras.api().ajax.reload();
      tablaAlmacen.api().ajax.reload();
      if (data.userAction === globalUser) {
        return new Alerta(data.msg);
      }
    });
    tablaRegistradosJq = ctnComprasJq.find('#prod-registrados');
    contTablaRegJq = tablaRegistradosJq.parent();
    tablaRegistrados = tablaRegistradosJq.dataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/compras/prodReg',
      "columns": [
        {
          "data": "docdata._id"
        }, {
          "data": "docdata.fecha"
        }, {
          "data": "docdata.serie"
        }, {
          "data": "docdata.codigo"
        }, {
          "data": "docdata.descripcion"
        }, {
          "data": "docdata.costo"
        }, {
          "data": "docdata.cantidad"
        }, {
          "data": "docdata.utilidad"
        }, {
          "data": "docdata.garantia"
        }, {
          "data": "docdata.proveedor"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": false,
          "createdCell": function(td, cellData, rowData, row, col) {
            var time;
            time = moment(cellData).format("DD/MMM/YYYY H:mm:ss");
            return $(td).text(time);
          }
        }, {
          "visible": false,
          "targets": 2
        }, {
          "targets": 3,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "targets": 4,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "visible": false,
          "targets": 5
        }, {
          "visible": false,
          "targets": 6
        }, {
          "visible": false,
          "targets": 7
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": false,
          "targets": 9
        }
      ],
      "order": [1, 'desc']
    });
    showHideMenujq = ctnComprasJq.find('div.show-hide-colms:eq(0)');
    $(document).ajaxComplete(function(event, xhr, settings) {
      return tablaRegistradosJq.css('width', '');
    });
    formCompraJq = ctnComprasJq.find('form#compra-nueva');
    formIvaJq = ctnComprasJq.find('#form-iva');
    ivaCompraJq = formIvaJq.find('input:text:eq(0)').on('keyup change', function(e) {
      var costo, precio_recibo, utilidad;
      ivaJqVenta.val(ivaCompraJq.val());
      ivaJqVenta.trigger('keyup');
      utilidad = utilidadJq.val();
      costo = costoJq.val();
      if (utilidad !== '' && costo !== '') {
        precio_recibo = costo * 1 + utilidad * 1;
        precioRecJq.val(precio_recibo.toFixed(2));
        return precioFacJq.val(((ivaCompraJq.val() * precio_recibo / 100) + precio_recibo).toFixed(2));
      }
    });
    precioRecJq = formIvaJq.find('input:text:eq(1)');
    precioFacJq = formIvaJq.find('input:text:eq(2)');
    costoJq = formCompraJq.find('input:text:eq(1)').on('keyup change', function(e) {
      var costo, precio_recibo, utilidad;
      utilidad = utilidadJq.val();
      costo = costoJq.val();
      if (utilidad !== '') {
        precio_recibo = costo * 1 + utilidad * 1;
        precioRecJq.val(precio_recibo.toFixed(2));
        return precioFacJq.val(((ivaCompraJq.val() * precio_recibo / 100) + precio_recibo).toFixed(2));
      }
    });
    utilidadJq = formCompraJq.find('input:text:eq(2)').on('keyup change', function(e) {
      var costo, precio_recibo, utilidad;
      utilidad = utilidadJq.val();
      costo = costoJq.val();
      if (costo !== '') {
        precio_recibo = costo * 1 + utilidad * 1;
        precioRecJq.val(precio_recibo.toFixed(2));
        return precioFacJq.val(((ivaCompraJq.val() * precio_recibo / 100) + precio_recibo).toFixed(2));
      }
    });
    new Validador({
      formulario: formIvaJq,
      procesarFormulario: (function(_this) {
        return function(formJq) {};
      })(this)
    });
    ctnComprasJq.find('ul.dropdown-cols:eq(0) input:checkbox').on('click', function(event) {
      var column;
      column = tablaRegistrados.api().column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaRegistradosJq.css('width', '');
    });
    cantidadJq = ctnComprasJq.find("input#cantidad");
    tableTitleJq = ctnComprasJq.find('div#title-panel1');
    buttonTitleJq = ctnComprasJq.find('div#title-panel2');
    titlePanelJq = ctnComprasJq.find('div#nueva-compra div.panel-heading');
    itemElegido = {};
    $('tbody', tablaRegistradosJq).on('click', 'a', function(evt) {
      var data, indexElegido;
      evt.preventDefault();
      indexElegido = tablaRegistrados.api().row($(this).parents('tr')[0]).index();
      data = tablaRegistrados.api().row(indexElegido).data();
      itemElegido = data.docdata;
      return contTablaRegJq.fadeOut('fast', function() {
        showHideMenujq.hide();
        tableTitleJq.show();
        buttonTitleJq.hide();
        return contTablaRegJq.next().fadeIn('fast', function() {
          var jq, prop;
          for (prop in valArray) {
            jq = valArray[prop];
            jq.val(data.docdata[prop]);
          }
          return valArray.costo.select();
        });
      });
    });
    inputSearchJq = $('input.input-sm', contTablaRegJq);
    imputsFormCompraJq = $('input:text, textarea', formCompraJq);
    btnSearchJq = ctnComprasJq.find('button#btn-search-form').on('click', function(evt) {
      validador.ocultarMensajes();
      cantidadJq.val('');
      return contTablaRegJq.next().fadeOut('fast', function() {
        if (inputSearchJq.val() !== '') {
          inputSearchJq.val('');
          inputSearchJq.trigger('keyup');
        }
        showHideMenujq.show();
        tableTitleJq.hide();
        buttonTitleJq.show();
        return contTablaRegJq.fadeIn('fast', function() {
          return inputSearchJq.focus();
        });
      });
    });
    $(titlePanelJq).on('click', 'button:eq(0)', function(e) {
      return contTablaRegJq.fadeOut('fast', function() {
        showHideMenujq.hide();
        tableTitleJq.show();
        buttonTitleJq.hide();
        btnClearJq.trigger('click');
        return contTablaRegJq.next().fadeIn('fast', function() {
          valArray.codigo.val(getCodProd());
          return valArray.descripcion.focus();
        });
      });
    });
    btnClearJq = ctnComprasJq.find('button#btnClearForm').on('click', function(evt) {
      valArray.codigo.val(getCodProd());
      imputsFormCompraJq.slice(1).val('');
      precioRecJq.val('');
      precioFacJq.val('');
      validador.ocultarMensajes();
      itemElegido = {};
      return valArray.descripcion.focus();
    });
    serializeForm = function(formJq) {
      var objResult;
      objResult = {};
      $('input:text, textarea', formJq).each(function(k) {
        var elJq;
        elJq = $(this);
        return objResult[elJq.attr('id')] = elJq.val();
      });
      console.log(objResult);
      return objResult;
    };
    procAddToCard = function(series) {
      var itemsInCart, rowObj;
      if (series == null) {
        series = false;
      }
      itemsInCart = [];
      rowObj = serializeForm(formCompraJq);
      if (series) {
        rowObj.series = series;
      } else {
        rowObj.series = '----------';
      }
      itemsInCart.push(rowObj);
      console.log(itemsInCart);
      btnClearJq.trigger('click');
      io.emit('compras:shopp', {
        compras: itemsInCart,
        userAction: globalUser,
        productoReg: swPorComprar,
        iva: ivaCompraJq.val()
      });
      return new Alerta({
        tipo: 'info',
        titulo: 'Item(s) Agregado',
        texto: "" + rowObj.cantidad + " item(s) agregados al carrito",
        posicion: 'arriba-izquierda'
      });
    };
    procSeries = function() {
      var cantidad, htmlSeries, i, modalSeries, _j;
      cantidad = cantidadJq.val() * 1;
      htmlSeries = '<form class="form-horizontal">';
      for (i = _j = 0; 0 <= cantidad ? _j < cantidad : _j > cantidad; i = 0 <= cantidad ? ++_j : --_j) {
        htmlSeries += "<div class='form-group'> <label for='serie" + (i + 1) + "' class='col-md-3  control-label'>Serie" + (i + 1) + ":</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='serie" + (i + 1) + "' name='serie" + (i + 1) + "' placeholder='Serie del producto' validar='requiere'> </div> </div>";
      }
      htmlSeries += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';
      modalSeries = new Modal({
        titulo: 'Series',
        tipo: 'formulario',
        contenido: htmlSeries,
        despuesDeMostrar: function(ModalJq) {
          return setTimeout(function() {
            return ModalJq.find('input:text:first').focus();
          }, 500);
        },
        antesDeMostrar: function(ModalJq) {
          return ModalJq.find('div.modal-footer button:first').text('ok');
        }
      });
      return new Validador({
        formulario: modalSeries.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formSeriesJq) {
            return modalSeries.cerrar(function() {
              var series;
              series = '';
              formSeriesJq.find('input:text:not(:last)').each(function(k) {
                return series += "" + ($(this).val()) + ", ";
              });
              series += formSeriesJq.find('input:text:last').val();
              return procAddToCard(series);
            });
          };
        })(this)
      });
    };
    validador = new Validador({
      formulario: formCompraJq,
      procesarFormulario: function(formJq) {
        var modalConfirm, prod;
        formIvaJq.trigger('submit');
        if (ivaCompraJq.val() !== '') {
          prod = itemElegido;
          if (!prod.serie) {
            swPorComprar = false;
            return modalConfirm = new Modal({
              titulo: 'Producto Nuevo',
              tipo: 'confirmacion',
              contenido: "<p>! El Producto con codigo <strong>" + (valArray.codigo.val()) + "</strong> es un nuevo producto</p><br> <p>Posee serie?</p>",
              accionSi: function() {
                return modalConfirm.cerrar(function() {
                  return procSeries();
                });
              },
              antesDeMostrar: function(jqModal) {
                var btnsi;
                btnsi = jqModal.find('button.btn-danger').text('SI');
                jqModal.find('button:last').text('NO').click(function(e) {
                  return procAddToCard();
                });
                return setTimeout(function() {
                  return btnsi.focus();
                }, 500);
              },
              despuesDeCerrar: function(jqModal) {}
            });
          } else if (prod.serie !== '----------') {
            swPorComprar = true;
            return procSeries();
          } else {
            swPorComprar = true;
            return procAddToCard();
          }
        }
      }
    });
    tablaComprasJq = ctnComprasJq.find('#tabla-compras');
    contTablaComJq = tablaComprasJq.parent();
    tablaCompras = tablaComprasJq.dataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/compras/getAll',
      "columns": [
        {
          "data": "_id"
        }, {
          "data": "fecha"
        }, {
          "data": "serie"
        }, {
          "data": "codigo"
        }, {
          "data": "descripcion"
        }, {
          "data": "costo"
        }, {
          "data": "cantidad"
        }, {
          "data": "utilidad"
        }, {
          "data": "garantia"
        }, {
          "data": "proveedor"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": true,
          "createdCell": function(td, cellData, rowData, row, col) {
            var time;
            time = moment(cellData).format("DD/MMMM/YYYY H:mm:ss");
            return $(td).text(time);
          }
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": false,
          "targets": 9
        }
      ],
      "order": [1, 'desc']
    });
    $(document).ajaxComplete(function(event, xhr, settings) {
      return tablaComprasJq.css('width', '');
    });
    return ctnComprasJq.find('ul.dropdown-cols:eq(1) input:checkbox').on('click', function(event) {
      var column;
      column = tablaCompras.api().column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaComprasJq.css('width', '');
    });
  });

  htmlFormCobrar = '<form class="form-horizontal">';

  htmlFormCobrar += "<div class='form-group'> <label for='monto' class='col-md-3  control-label'>Monto a Cobrar:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='monto' name='monto' autocomplete='off' validar='real'> </div> </div>";

  htmlFormCobrar += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  clientesContrato = ['MADEPA', 'COBEE'];

  formHtmlEditarServicio = '<form class="form-horizontal">';

  formHtmlEditarServicio += "<div class='form-group'> <label for='fecha_cancel' class='col-md-3  control-label'>Fecha Reg.:</label> <div class='col-md-5'> <div class='input-group date' id='datetimepicker2'> <input type='text' class='form-control' id='fecha' name='fecha' autocomplete='off' data-date-format='DD/MMM/YYYY H:mm:ss'/> <span class='input-group-addon'><span class='glyphicon glyphicon-calendar'></span> </div> </div> </div> <div class='form-group'> <label for='cliente' class='col-md-3  control-label'>Cliente:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='cliente' name='cliente' autocomplete='off' validar='requiere'> </div> </div> <div class='form-group'> <label for='descripcion' class='col-md-3  control-label'>Descripcion:</label> <div class='col-md-5'> <textarea type='text' class='form-control' id='descripcion' name='descripcion' autocomplete='off' validar='requiere'></textarea> </div> </div> <div class='form-group'> <label for='cobro' class='col-md-3  control-label'>Cobro:</label> <div class='col-md-5'> <select class='form-control' validar='requiere'> <option></option> <option>pendiente</option> <option>cancelado</option> <option>contrato</option> </select> </div> </div> <div class='form-group'> <label for='fecha' class='col-md-3  control-label'>Monto:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='fecha' name='fecha' autocomplete='off' validar='real'> </div> </div> <div class='form-group'> <label for='fecha_cancel' class='col-md-3  control-label'>Fecha Cancel:</label> <div class='col-md-5'> <div class='input-group date' id='datetimepicker1'> <input type='text' class='form-control' id='fecha_cancel' name='fecha_cancel' autocomplete='off' data-date-format='DD/MMM/YYYY H:mm:ss'/> <span class='input-group-addon'><span class='glyphicon glyphicon-calendar'></span> </div> </div> </div>";

  formHtmlEditarServicio += '<input type="submit" style="width:0px;height:0px;margin:0;padding:0;border:none;"></form>';

  ctnVentasJq = $('div#ventas-ctn');

  tablaAlmacen = void 0;

  $(document).ready(function() {
    var addCartProcedure, btnClearJq2, cancelacionVar, clienteJq, contTablaVentaJq, formNuevoServJq, hideShowIvaJq, htmlCantdad, htmlConfVenta, inputSearchJq, itemElegido, itemsInCartVentas, nroComprobanteJq, nrodeventa, radiosJq, reciboRadiojq, rowSelectedJq, rowText, settingsg, showHideMenujq, sumarCols, tablaAlmacenJq, tablaVentas, tablaVentasJq, tbodyFormJq, tipoVenta, totalJq2, validadorNuevaVenta;
    io.on('ventas:deleteRestore', function(data) {
      drawEstadisticasCompras();
      tablaVentas.api().ajax.reload();
      tablaAlmacen.api().ajax.reload();
      drawEstadisticasVentas();
      if (data.userAction === globalUser) {
        return new Alerta(data.msg);
      }
    });
    io.on('ventas:addToCart', function(data) {
      tablaAlmacen.api().ajax.reload();
      if (data.userAction === globalUser) {
        addCartProcedure(data.item);
        inputSearchJq.val('').trigger('keyup').focus();
        return new Alerta(data.msg);
      }
    });
    io.on('ventas:cobrar', function(data) {
      drawEstadisticasVentas();
      tablaVentas.api().ajax.reload();
      if (data.userAction === globalUser) {
        return new Alerta(data.msg);
      }
    });
    io.on('ventas:delToCart', function(data) {
      return tablaAlmacen.api().ajax.reload();
    });
    io.on('ventas:cancelShopp', function(data) {
      return tablaAlmacen.api().ajax.reload();
    });
    io.on('ventas:shopp', function(data) {
      drawEstadisticasVentas();
      drawEstadisticasCompras();
      if (data.tipoVenta === 'factura') {
        NroFactura = data.nroComprobante * 1 + 1;
      } else {
        NroRecibo = data.nroComprobante * 1 + 1;
      }
      if (data.userAction === globalUser && data.tipoVenta === 'recibo') {
        window.open("/reportes/viewRecibo/", "report", "toolbar=no, scrollbars=yes, resizable=yes, location=no, menubar=no, top=50, left=250, width=700, height=400");
      }
      setTimeout(function() {
        return tablaVentas.api().ajax.reload();
      }, 1);
      if (!data.existCliente) {
        clientes.push(data.cliente);
      }
      if (data.userAction === globalUser) {
        btnClearJq2.trigger('click');
        return new Alerta(data.msg);
      }
    });
    tablaAlmacenJq = ctnVentasJq.find('table#tabla-almacen');
    contTablaVentaJq = tablaAlmacenJq.parent();
    tablaAlmacen = tablaAlmacenJq.dataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/productos/getAll',
      "columns": [
        {
          "data": "_id"
        }, {
          "data": "fecha"
        }, {
          "data": "serie"
        }, {
          "data": "codigo"
        }, {
          "data": "descripcion"
        }, {
          "data": "costo"
        }, {
          "data": "cantidad"
        }, {
          "data": "utilidad"
        }, {
          "data": "garantia"
        }, {
          "data": "proveedor"
        }, {
          "data": "precio_recibo"
        }, {
          "data": "precio_factura"
        }, {
          "data": "idCompra"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": true,
          "createdCell": function(td, cellData, rowData, row, col) {
            var time;
            time = moment(cellData).format("DD/MMM/YYYY H:mm:ss");
            $(td).text(time);
            return rowData.fecha = time;
          }
        }, {
          "visible": true,
          "targets": 2
        }, {
          "targets": 3,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).addClass('selectable-td').html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "targets": 4,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).addClass('selectable-td').html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "visible": false,
          "targets": 5
        }, {
          "visible": true,
          "targets": 6
        }, {
          "visible": false,
          "targets": 7
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": false,
          "targets": 9
        }, {
          "visible": false,
          "targets": 12
        }
      ],
      "order": [1, 'asc']
    });
    showHideMenujq = ctnVentasJq.find('div.show-hide-colms:eq(0)');
    $(document).ajaxComplete(function(event, xhr, settings) {
      tablaAlmacenJq.css('width', '');
      return showHideMenujq.show();
    });
    ctnVentasJq.find('ul.dropdown-cols:eq(0) input:checkbox').on('click', function(event) {
      var column;
      column = tablaAlmacen.api().column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaAlmacenJq.css('width', '');
    });
    htmlCantdad = "<form class='form-horizontal'> <div class='form-group'> <label for='cantidad' class='col-md-3  control-label'>Cantidad:</label> <div class='col-md-5'> <input type='text' class='form-control upper' id='cantidad' name='cantidad' placeholder='Cantidad a vender' validar='requiere'> </div> </div><input type='submit' style='width:0px;height:0px;margin:0;padding:0;border:none;'></form>";
    itemElegido = {};
    $('tbody', tablaAlmacenJq).on('click', 'a', function(evt) {
      var elTrNode, indexElegido, modalCantidad, rowTable;
      evt.preventDefault();
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaAlmacen.api().row(elTrNode).index();
      rowTable = tablaAlmacen.api().row(indexElegido);
      itemElegido = rowTable.data();
      if (itemElegido.cantidad * 1 > 1) {
        modalCantidad = new Modal({
          titulo: 'Cantidad A Vender',
          tipo: 'formulario',
          contenido: htmlCantdad,
          despuesDeMostrar: function(ModalJq) {
            return setTimeout(function() {
              return ModalJq.find('input:text:first').focus();
            }, 500);
          },
          antesDeMostrar: function(ModalJq) {
            return ModalJq.find('div.modal-footer button:first').text('ok');
          }
        });
        return new Validador({
          formulario: modalCantidad.jq.find('form:first'),
          procesarFormulario: (function(_this) {
            return function(fromJq) {
              var cantidad;
              cantidad = fromJq.find('input:text:first').val();
              if (cantidad * 1 > itemElegido.cantidad * 1) {
                return new Alerta({
                  tipo: 'error',
                  titulo: 'Error',
                  texto: "Solo se dispone de " + itemElegido.cantidad + " Productos de este tipo",
                  posicion: 'arriba-izquierda'
                });
              } else {
                return modalCantidad.cerrar(function() {
                  itemElegido.cantidad = cantidad * 1;
                  return io.emit('ventas:addToCart', {
                    item: itemElegido,
                    userAction: globalUser
                  });
                });
              }
            };
          })(this)
        });
      } else {
        return io.emit('ventas:addToCart', {
          item: itemElegido,
          userAction: globalUser
        });
      }
    });
    inputSearchJq = $('input.input-sm', contTablaVentaJq);
    itemsInCartVentas = {};
    addCartProcedure = function(item) {
      var btnAddJq, precio, precioFactura, preciou, textareaJq, trJq, txtAreaJq, txtJq;
      if (itemsInCartVentas[item._id] != null) {
        itemsInCartVentas[item._id].cantidad += item.cantidad;
        txtAreaJq = ctnVentasJq.find("tr#" + item._id + " textarea").val("" + itemsInCartVentas[item._id].cantidad + " " + item.descripcion);
        txtJq = ctnVentasJq.find("tr#" + item._id + " input:text");
        precioFactura = item.precio_recibo + iva * item.precio_recibo / 100;
        preciou = tipoVenta === 'recibo' ? item.precio_recibo * 1 : precioFactura;
        precio = (preciou * itemsInCartVentas[item._id].cantidad).toFixed(2);
        return txtJq.val(precio);
      } else {
        itemsInCartVentas[item._id] = item;
        btnAddJq = ctnVentasJq.find('form button.btn-info:last');
        trJq = btnAddJq.parent().parent();
        if (trJq.find('input:text').val() !== '' || trJq.find('textarea').val() !== '') {
          ctnVentasJq.find('form button.btn-info:last').trigger('click');
          btnAddJq = ctnVentasJq.find('form button.btn-info:last');
          trJq = btnAddJq.parent().parent();
        }
        precioFactura = item.precio_recibo + iva * item.precio_recibo / 100;
        preciou = tipoVenta === 'recibo' ? item.precio_recibo * 1 : precioFactura;
        precio = (preciou * item.cantidad).toFixed(2);
        trJq.find('input:text').val(precio);
        textareaJq = trJq.find('textarea').attr('disabled', 'disabled').val(item.serie === '----------' ? "" + item.cantidad + " " + item.descripcion : "" + item.cantidad + " " + item.descripcion + " (Serie: " + item.serie + " )");
        textareaJq.attr('rows', (textareaJq.val().length / 40) + 1);
        trJq.attr('id', item._id);
        return totalJq2.text(sumarCols());
      }
    };
    tablaVentasJq = ctnVentasJq.find('table#tabla-ventas-realizadas');
    tablaVentas = tablaVentasJq.dataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/ventas/getAll',
      "columns": [
        {
          "data": "_id"
        }, {
          "data": "fecha"
        }, {
          "data": "cliente"
        }, {
          "data": "descripcionCorta"
        }, {
          "data": "descripcion"
        }, {
          "data": "items"
        }, {
          "data": "monto"
        }, {
          "data": "tipo"
        }, {
          "data": "nroComprobante"
        }, {
          "data": "cancelacion"
        }, {
          "defaultContent": '<button type="button" class="btn btn-danger btn-xs" alt="eliminar"><i class="fa fa-times"></i></button> <button type="button" class="btn btn-info btn-xs" alt="editar"><i class="fa fa-pencil"></i></button>'
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": true,
          "createdCell": function(td, cellData, rowData, row, col) {
            var time;
            $(td).attr('name', rowData._id);
            time = moment(new Date(cellData)).format("DD/MMM/YYYY H:mm:ss");
            return $(td).text(time);
          }
        }, {
          "visible": false,
          "targets": 4
        }, {
          "visible": false,
          "targets": 5
        }
      ],
      "order": [1, 'desc']
    });
    $(document).ajaxComplete(function(event, xhr, settings) {
      return tablaVentasJq.css('width', '');
    });
    tablaVentasJq.on('click', 'button.btn-danger', function(e) {
      var elTrNode, indexElegido, modalConfirm, rowTable;
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaVentas.api().row(elTrNode).index();
      rowTable = tablaVentas.api().row(indexElegido);
      itemElegido = rowTable.data();
      console.log(itemElegido);
      return modalConfirm = new Modal({
        titulo: 'Confirmar - Eliminar Venta',
        tipo: 'confirmacion',
        contenido: "<div class='radio'> <label> <input type='radio' name='optionsRadios' id='optionsRadios1' value='option1' checked> Eliminar Venta <span class='label label-info'>Restaurando</span> los items a Almacen </label> </div> <div class='radio'> <label> <input type='radio' name='optionsRadios' id='optionsRadios2' value='option2'> Eliminar Venta <span class='label label-info'>Sin Restaurar</span> Lo items a Almacen </label> </div>",
        accionSi: (function(_this) {
          return function() {
            if (modalConfirm.jq.find('#optionsRadios1').is(':checked')) {
              io.emit('ventas:deleteRestore', {
                id: itemElegido._id,
                userAction: globalUser
              });
            } else {
              io.emit('ventas:delete', {
                id: itemElegido._id,
                userAction: globalUser
              });
            }
            return modalConfirm.cerrar(function() {});
          };
        })(this),
        antesDeMostrar: function(jqModal) {
          return jqModal.find('button:last').text('Cancelar').click(function(e) {
            return modalConfirm.cerrar();
          });
        }
      });
    });
    tablaVentasJq.on('click', 'button.btn-info', function(e) {
      var elTrNode, indexElegido, rowTable;
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaVentas.api().row(elTrNode).index();
      rowTable = tablaVentas.api().row(indexElegido);
      itemElegido = rowTable.data();
      return $.ajax({
        url: '/reportes/makeRecibo/',
        type: 'POST',
        dataType: 'json',
        data: "data=" + (JSON.stringify(itemElegido)),
        success: function(resp) {
          return window.open("/reportes/viewRecibo/", "report", "toolbar=no, scrollbars=yes, resizable=yes, location=no, menubar=no, top=50, left=250, width=700, height=400");
        },
        error: function() {
          return alert('error in server');
        }
      });
    });
    clienteJq = ctnVentasJq.find('input#cliente-venta');
    ivaJqVenta = ctnVentasJq.find('input#iva-venta').on('keyup', function(e) {
      var ivaAnt, sum;
      ivaAnt = iva * 1;
      console.log('iva ' + iva);
      iva = ivaJqVenta.val() * 1;
      sum = 0;
      tbodyFormJq.find('input:text').each(function(ind) {
        var porcen, valor, valorAnt, valorcalc;
        valor = $(this).val() * 1;
        if (valor) {
          valorAnt = 100 * valor / (100 + ivaAnt);
          console.log('valor ' + valor);
          console.log('ivaAnt ' + ivaAnt);
          console.log('anterior ' + valorAnt);
          porcen = valorAnt * iva / 100;
          valorcalc = valorAnt + porcen;
          $(this).val(valorcalc.toFixed(2));
          return sum += valorcalc;
        }
      });
      return totalJq2.text(sum.toFixed(2));
    });
    hideShowIvaJq = ivaJqVenta.parent();
    clienteJq.typeahead({
      source: function() {
        return clientes;
      },
      updater: function(cliente) {
        setTimeout(function() {
          return tbodyFormJq.find('textarea#descripcion-venta:first').focus();
        }, 0);
        return cliente;
      }
    });
    formNuevoServJq = ctnVentasJq.find('form#formu-nueva-venta');
    tbodyFormJq = formNuevoServJq.find('tbody:eq(1)');
    totalJq2 = formNuevoServJq.find('tfoot th:eq(1)');
    rowSelectedJq = void 0;
    rowText = '<tr> <td><textarea class="form-control input-sm" rows="1" id="descripcion-venta" name="descripcion-venta" placeholder="Descripcion del producto ó servicio" validar="requiere"></textarea></td> <td><input type="text" class="form-control input-sm" autocomplete="off" id="precio-venta" name="precio-venta" placeholder="Precio del producto ó servicio" validar="real"></td> <td> <button type="button" class="btn btn-danger btn-sm" tabindex="-1" alt="eliminar"><i class="fa fa-times"></i></button> <button type="button" class="btn btn-info btn-sm" tabindex="-1"><i class="fa fa-plus fa-fw"></i> </button> </td> </tr>';
    tbodyFormJq.on('keyup', 'textarea', function(e) {
      var textareaJq;
      textareaJq = $(this);
      if (e.keyCode === 13) {
        textareaJq.val(($.trim(textareaJq.val())) + ' ');
      }
      return textareaJq.attr('rows', (textareaJq.val().length / 40) + 1);
    });
    tbodyFormJq.on('click', 'button.btn-info', function(e) {
      var rowAddJq;
      $(this).parent().html('<button type="button" class="btn btn-danger btn-sm" tabindex="-1" alt="eliminar"><i class="fa fa-times"></i></button>');
      rowAddJq = $(rowText).appendTo(tbodyFormJq);
      validadorNuevaVenta.reiniciar();
      return setTimeout(function() {
        return rowAddJq.find('textarea:first').focus();
      }, 100);
    });
    tbodyFormJq.on('click', 'button.btn-danger', function(e) {
      var id, nextJq, tdAntJq, trJq, trPibotJq;
      trJq = $(this).parent().parent();
      id = trJq.attr('id');
      if (id !== void 0) {
        delete itemsInCartVentas[id];
        io.emit('ventas:delToCart', {
          id: id,
          userAction: globalUser
        });
      }
      trPibotJq = trJq.prev();
      if ($(this).next().length) {
        tdAntJq = trPibotJq.find('td:last');
        if (trPibotJq.prev().length) {
          tdAntJq.html('<button type="button" class="btn btn-danger btn-sm" tabindex="-1" alt="eliminar"><i class="fa fa-times"></i></button> <button type="button" class="btn btn-info btn-sm"><i class="fa fa-plus fa-fw"></i> </button>');
        } else {
          tdAntJq.html('<button type="button" class="btn btn-info btn-sm" tabindex="-1"><i class="fa fa-plus fa-fw"></i></button>');
        }
        trJq.remove();
      } else {
        nextJq = trJq.next();
        if (trPibotJq.length === 0 && nextJq.next().length === 0) {
          nextJq.find('td:last').html('<button type="button" class="btn btn-info btn-sm" tabindex="-1"><i class="fa fa-plus fa-fw"></i> </button>');
        }
        trJq.remove();
      }
      totalJq2.text(sumarCols());
      return validadorNuevaVenta.reiniciar();
    });
    sumarCols = function() {
      var sum;
      sum = 0;
      tbodyFormJq.find('input:text').each(function(ind) {
        return sum += $(this).val() * 1;
      });
      return sum.toFixed(2);
    };
    tipoVenta = 'recibo';
    radiosJq = formNuevoServJq.find('input:radio').on('change', function(e) {
      var sum;
      tipoVenta = $(this).val();
      sum = 0;
      tbodyFormJq.find('input:text').each(function(ind) {
        var porcen, valor, valorcalc;
        valor = $(this).val() * 1;
        if (valor) {
          iva = ivaJqVenta.val() * 1;
          porcen = valor * iva / 100;
          if (tipoVenta === 'factura') {
            hideShowIvaJq.show();
            valorcalc = valor + porcen;
          } else {
            hideShowIvaJq.hide();
            valorcalc = 100 * valor / (100 + iva);
          }
          $(this).val(valorcalc.toFixed(2));
          return sum += valorcalc;
        }
      });
      return totalJq2.text(sum.toFixed(2));
    });
    reciboRadiojq = $(radiosJq[0]);
    tbodyFormJq.on('change keyup', 'input:text', function(e) {
      return totalJq2.text(sumarCols());
    });
    btnClearJq2 = $('button#btn-clear-form', ctnVentasJq).on('click', function(e) {
      var i, trJq, trsJq, _j, _len1;
      trsJq = tbodyFormJq.find('tr');
      for (i = _j = 0, _len1 = trsJq.length; _j < _len1; i = ++_j) {
        trJq = trsJq[i];
        if ($(trJq).attr('id') !== void 0) {
          itemsInCartVentas = {};
          io.emit('ventas:cancelShopp', {
            userAction: globalUser
          });
          break;
        }
      }
      reciboRadiojq.trigger('click');
      clienteJq.val('');
      trJq = tbodyFormJq.html(rowText);
      trJq.find('button.btn-danger').remove();
      totalJq2.text('');
      validadorNuevaVenta.reiniciar();
      return setTimeout(function() {
        return clienteJq.focus();
      }, 10);
    });
    tablaVentasJq.on('click', 'span.selectable-red', function(e) {
      var elTrNode, indexElegido, modalCobrar, montoJq, rowTable;
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaVentas.api().row(elTrNode).index();
      rowTable = tablaVentas.api().row(indexElegido);
      itemElegido = rowTable.data();
      montoJq = void 0;
      modalCobrar = new Modal({
        titulo: 'Cobrar Venta',
        tipo: 'formulario',
        contenido: htmlFormCobrar,
        despuesDeMostrar: (function(_this) {
          return function(ModalJq) {
            montoJq = ModalJq.find('input:text:first');
            montoJq.val(itemElegido.monto);
            return setTimeout(function() {
              return montoJq.select();
            }, 500);
          };
        })(this),
        antesDeMostrar: (function(_this) {
          return function(ModalJq) {
            return ModalJq.find('div.modal-footer button:first').text('ok');
          };
        })(this)
      });
      return new Validador({
        formulario: modalCobrar.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            if (montoJq.val() * 1 > itemElegido.monto) {
              return new Alerta({
                tipo: 'error',
                titulo: 'Error',
                texto: "Elija un monto menor o igua a " + itemElegido.monto,
                posicion: 'arriba-izquierda'
              });
            } else {
              return modalCobrar.cerrar(function() {
                return io.emit('ventas:cobrar', {
                  id: itemElegido._id,
                  monto: montoJq.val() * 1,
                  userAction: globalUser
                });
              });
            }
          };
        })(this)
      });
    });
    htmlConfVenta = "<table class='table table-striped conf-venta-table'> <thead> <tr> <th>Descripcion</th> <th>Subtotal</th> </tr> </thead> <tbody></tbody> <tfoot> <tr> <th>Total (Bs.)</th> <th></th> </tr> </tfoot> </table>";
    nroComprobanteJq = void 0;
    nrodeventa = void 0;
    cancelacionVar = void 0;
    validadorNuevaVenta = new Validador({
      formulario: formNuevoServJq,
      procesarFormulario: function(formJq) {
        var modConfirmar;
        return modConfirmar = new Modal({
          titulo: 'Confirmar Venta',
          tipo: 'confirmacion',
          contenido: htmlConfVenta,
          accionSi: function() {
            var nuevosItems;
            nrodeventa.trigger('submit');
            if (!nroComprobanteJq.next().is(':visible')) {
              nuevosItems = [];
              tbodyFormJq.find('tr').each(function(i) {
                var id, trJq;
                trJq = $(this);
                id = trJq.attr('id');
                if (id !== void 0) {
                  item = itemsInCartVentas[id];
                } else {
                  item = {};
                  item.descripcion = trJq.find('textarea').val();
                  item.cantidad = 1;
                }
                item.precio = trJq.find('input:text').val() * 1;
                return nuevosItems.push(item);
              });
              return modConfirmar.cerrar(function() {
                console.log(nuevosItems);
                return io.emit('ventas:shopp', {
                  cliente: clienteJq.val(),
                  iva: ivaJqVenta.val(),
                  tipoVenta: tipoVenta,
                  nroComprobante: $.trim(nroComprobanteJq.val()),
                  cancelacion: cancelacionVar,
                  items: nuevosItems,
                  userAction: globalUser
                });
              });
            }
          },
          antesDeMostrar: function(mjq) {
            var newRadiosJq, pharaGrapsJq, tbodyJq;
            cancelacionVar = 'pendiente';
            tbodyJq = mjq.find('tbody');
            pharaGrapsJq = $("<div><p><strong>Cliente: </strong>" + (clienteJq.val()) + "</p><p><strong>Comprobante: </strong></p> <p><strong>Cancelacion:</strong><label class='radio-inline'><input type='radio' class='cancelacion' name='inlineRadioOptions1' checked='checked' value='pendiente'>Pendiente</label><label class='radio-inline'><input type='radio' class='cancelacion' name='inlineRadioOptions1' value='cancelada'>Cancelada</label></p></div>").insertBefore(tbodyJq.parent());
            newRadiosJq = reciboRadiojq.parent().parent().find('label').clone().appendTo(pharaGrapsJq.find('p:eq(1)')).find('input:radio').on('change', function(e) {
              var html;
              $(radiosJq[newRadiosJq.index(this)]).trigger('click');
              html = '';
              tbodyFormJq.find('tr').each(function(i) {
                var descripcion, subtotal;
                descripcion = $(this).find('textarea').val();
                subtotal = $(this).find('input:text').val();
                return html += "<tr><td>" + descripcion + "</td><td>" + subtotal + "</td></tr>";
              });
              tbodyJq.html(html);
              mjq.find('tfoot th:last').text(totalJq2.text());
              nrodeventa.find('strong').text("N." + tipoVenta + ":");
              if (tipoVenta === 'factura') {
                return nroComprobanteJq.val(NroFactura);
              } else {
                return nroComprobanteJq.val(NroRecibo);
              }
            });
            pharaGrapsJq.find('input.cancelacion').on('change', function() {
              return cancelacionVar = $(this).val();
            });
            nrodeventa = $("<form style='position: fixed;top: 73px;right: 17px;' class='col-md-3'><strong>N." + tipoVenta + ":</strong><input type='text' class='form-control input-sm' style='background-color:lime;' validar='real'></input></form>").appendTo(pharaGrapsJq);
            new Validador({
              formulario: nrodeventa,
              procesarFormulario: function(formJq) {
                return nroComprobanteJq = formJq.find('input:text');
              }
            });
            nroComprobanteJq = nrodeventa.find('input:text');
            if (tipoVenta === 'factura') {
              nroComprobanteJq.val(NroFactura);
            } else {
              nroComprobanteJq.val(NroRecibo);
            }
            tbodyFormJq.find('tr').each(function(i) {
              var descripcion, subtotal;
              descripcion = $(this).find('textarea').val();
              subtotal = $(this).find('input:text').val();
              return $("<tr><td>" + descripcion + "</td><td>" + subtotal + "</td></tr>").appendTo(tbodyJq);
            });
            return mjq.find('tfoot th:last').text(totalJq2.text());
          }
        });
      }
    });
    ctnVentasJq.on('click', 'span.label-descripcion', function(e) {
      var elTrNode, indexElegido, modalDescripcion, rowTable;
      elTrNode = $(this).parents('tr')[0];
      indexElegido = tablaVentas.api().row(elTrNode).index();
      rowTable = tablaVentas.api().row(indexElegido);
      itemElegido = rowTable.data();
      return modalDescripcion = new Modal({
        titulo: 'Detalles de la Venta',
        tipo: 'alerta',
        contenido: htmlConfVenta,
        antesDeMostrar: function(mjq) {
          var nitem, pharaGrapsJq, tbodyHtml, tbodyJq, _j, _len1, _ref;
          tbodyHtml = "";
          tbodyJq = mjq.find('tbody');
          pharaGrapsJq = $("<ul><li><strong>Cliente: </strong>" + itemElegido.cliente + "</li><li><strong>Tipo Cancelacion: </strong>" + itemElegido.tipo + "</li><li><strong>Fecha De Emicion: </strong>" + itemElegido.fecha_emision + "</li><li><strong>Fecha Cancelacion: </strong>" + itemElegido.fecha_cancel + "</li></ul>").insertBefore(tbodyJq.parent());
          _ref = itemElegido.items;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            nitem = _ref[_j];
            if (nitem.cantidad !== void 0) {
              tbodyHtml += "<tr><td><strong>" + nitem.cantidad + "</strong> " + nitem.descripcion + " (serie:" + nitem.serie + ")</td><td>" + nitem.precio + "</td></tr>";
            } else {
              tbodyHtml += "<tr><td>" + nitem.descripcion + "</td><td>" + nitem.precio + "</td></tr>";
            }
          }
          tbodyJq.html(tbodyHtml);
          return mjq.find('tfoot th:last').text(itemElegido.monto);
        }
      });
    });
    settingsg = void 0;
    tablaVentasJq.on('search.dt', function(e, settings) {
      return settingsg = settings;
    });
    ctnVentasJq.find('button.pdf').on('click', function(e) {
      return $.ajax({
        url: '/reportes/makeReport/',
        type: 'POST',
        dataType: 'json',
        data: "data=" + (JSON.stringify({
          ventas: tablaVentas.fnGetDisplayRows(),
          fecha: new Date(),
          parametros: $.trim(tablaVentas.api().settings().search())
        })),
        success: function(resp) {
          console.log(resp);
          return window.open("/reportes/viewReport/", "report", "toolbar=no, scrollbars=yes, resizable=yes, location=no, menubar=no, top=50, left=250, width=700, height=400");
        },
        error: function() {
          return alert('error in server');
        }
      });
    });
    return $(window).on('beforeunload', function(e) {
			io.emit('ventas:cancelShopp', {
				userAction: globalUser
			});
		});
  });

  allUsers = {};

  serializeForm2 = function(formJq) {
    var data, pass, privilegios;
    data = {};
    formJq.find('input:text, select').each(function(i) {
      var elJq;
      elJq = $(this);
      return data[elJq.attr('name')] = elJq.val();
    });
    privilegios = [];
    formJq.find('div.privilegios input:checkbox').each(function(i) {
      var elJq;
      elJq = $(this);
      if (elJq.is(':checked')) {
        return privilegios.push(elJq.attr('name'));
      }
    });
    data.privilegios = privilegios;
    pass = formJq.find('#rewPass').val();
    if (pass !== '') {
      data.password = pass;
    }
    return data;
  };

  formHtml = function(opt) {
    var arrayPass, htmlForm, key, val;
    htmlForm = "<form class='form-horizontal'role='form'>";
    htmlForm += "<div class='form-group'> <label for='name' class='col-lg-3 control-label'>Nombre</label> <div class='col-lg-8'> <input type='text' autofocus class='form-control' id='name' name='name' validar='requiere'> </div> </div> <div class='form-group'> <label for='email' class='col-lg-3 control-label'>Email</label> <div class='col-lg-8'> <input type='text' class='form-control' id='email' name='email' validar='email'> </div> </div>";
    htmlForm += "<div class='form-group'> <label for='privilegios' class='col-lg-3 control-label'>Privilegios</label> <div class='col-lg-8'> <div id='blk-privilegio' class='privilegios' validar='especial'> <label class='checkbox'> <input type='checkbox' name='estadisticas'> Estadisticas </label> <label class='checkbox'> <input type='checkbox' name='comprar'> Comprar </label> <label class='checkbox'> <input type='checkbox' name='vender'> Vender </label> <label class='checkbox'> <input type='checkbox' name='ventas'> Ventas </label> <label class='checkbox'> <input type='checkbox' name='reportes'> Reportes </label> <label class='checkbox'> <input type='checkbox' name='clientes'> Admin. Clientes </label> <label class='checkbox'> <input type='checkbox' name='proveedores'> Admin. Proveedores </label> <label class='checkbox'> <input type='checkbox' name='usuarios'> Admin. Usuarios </label> </div> </div> </div>";
    htmlForm += "<div class='form-group'> <label for='estado' class='col-lg-3 control-label'>Estado</label> <div class='col-lg-8'> <select type='text' class='form-control' id='estado' name='estado' validar='requiere'> <option></option> <option>Habilitado</option> <option>Bloqueado</option> </select> </div> </div>";
    if (opt === 'edit') {
      htmlForm += "<div class='form-group chk'> <div class='col-lg-offset-2 col-lg-10'> <div class='checkbox'> <label> <input type='checkbox' name='chk'> Cambiar Password </label> </div> </div> </div>";
      htmlForm += "<div class='cnt-pass' style='display:none;'>";
    } else {
      htmlForm += "<div class='cnt-pass'>";
    }
    arrayPass = {
      newPass: 'Password',
      rewPass: 'Reescribir pass'
    };
    for (key in arrayPass) {
      val = arrayPass[key];
      htmlForm += "<div class='form-group'> <label for='" + key + "' class='col-lg-3 control-label'>" + val + "</label> <div class='col-lg-8'> <input type='password' class='form-control' id='" + key + "' name='" + key + "' validar='requiere" + (key === "rewPass" ? ",igual_a|newPass" : "") + "'> </div> </div>";
    }
    htmlForm += "</div></form>";
    return htmlForm;
  };

  User = (function() {
    function User(options) {
      this.options = options != null ? options : {};
      this.html = "<div class='col-lg-5' id='" + this.options._id + "' > <div class='panel panel-info'> <div class='panel-heading'> <i class='fa fa-user fa-2x'></i> <strong>" + this.options.name + "</strong> </div> <div class='panel-body'> <p><strong>Email: </strong>" + this.options.email + "</p> <p><strong>Privilegio: </strong>" + this.options.privilegios + "</p> <p><strong>Estado: </strong>" + this.options.estado + "</p> </div> <div class='panel-footer'> <div class='btn-group btn-group-sm'> <button type='button' class='btn btn-info'><i class='fa fa-pencil fa-fw'></i> Editar</button> <button type='button' class='btn btn-danger'><i class='fa fa-minus fa-fw'></i> Eliminar</button> </div> </div> </div> </div>";

      /*
      			<select type='text' class='form-control' id='#{key}' name='#{key}' validar='requiere'>
      				<option></option>
      				<option>Administrador</option>
      				<option>Empleado</option>
      			</select>
       */
    }

    User.prototype.addTo = function(jqElement) {
      this.jq = $(this.html).appendTo(jqElement);
      this.panelJq = $('div.panel', this.jq);
      $('button:first', this.jq).click((function(_this) {
        return function(e) {
          _this.panelJq.removeClass().addClass('panel panel-danger');
          return _this.edit();
        };
      })(this));
      return $('button:last', this.jq).click((function(_this) {
        return function(e) {
          _this.panelJq.removeClass().addClass('panel panel-danger');
          return _this["delete"]();
        };
      })(this));
    };

    User.prototype["delete"] = function() {
      var modConfirmar;
      return modConfirmar = new Modal({
        titulo: this.options.name === globalUser ? 'Eliminar - Usuario (<small>El sitema se reinicia</small>)' : 'Eliminar - Usuario',
        tipo: 'confirmacion',
        contenido: "Realmente desea eliminar este usuario?",
        accionSi: (function(_this) {
          return function() {
            return modConfirmar.cerrar(function() {
              return io.emit('users:delete', {
                id: _this.options._id,
                userDelete: _this.options.name,
                userAction: globalUser
              });
            });
          };
        })(this),
        despuesDeCerrar: (function(_this) {
          return function(mjq) {
            return _this.panelJq.removeClass().addClass('panel panel-info');
          };
        })(this)
      });
    };

    User.prototype.edit = function() {
      var editModal;
      editModal = new Modal({
        titulo: this.options.name === globalUser ? 'Editar - Usuario (<small>El sitema se reinicia</small>)' : 'Editar - Usuario',
        tipo: 'formulario',
        contenido: formHtml('edit'),
        antesDeMostrar: (function(_this) {
          return function(jq) {
            var ctnPassJq, key, privilegios, val, _ref;
            ctnPassJq = $('div.cnt-pass');
            $('div.chk input:checkbox', jq).click(function() {
              if ($(this).is(':checked')) {
                return ctnPassJq.show();
              } else {
                return ctnPassJq.hide();
              }
            });
            _ref = _this.options;
            for (key in _ref) {
              val = _ref[key];
              if (key !== '_id') {
                jq.find("input#" + key + ", select#" + key).val(val);
              }
            }
            privilegios = _this.options.privilegios;
            return jq.find('div#blk-privilegio input:checkbox').each(function(e) {
              var elChkJq;
              elChkJq = $(this);
              if (_.indexOf(privilegios, $.trim(elChkJq.attr('name'))) !== -1) {
                return elChkJq.trigger('click');
              }
            });
          };
        })(this),
        despuesDeCerrar: (function(_this) {
          return function(mjq) {
            return _this.panelJq.removeClass().addClass('panel panel-info');
          };
        })(this)
      });
      return new Validador({
        formulario: editModal.jq.find('form:first'),
        procesarFormulario: (function(_this) {
          return function(formJq) {
            console.log(serializeForm2(formJq));
            return editModal.cerrar(function() {
              return io.emit('users:edit', {
                id: _this.options._id,
                newData: serializeForm2(formJq),
                userAction: globalUser,
                useredit: _this.options.name
              });
            });
          };
        })(this)
      });
    };

    User.prototype.updateHtml = function(newData) {
      var key, val;
      for (key in newData) {
        val = newData[key];
        if (this.options[key]) {
          this.options[key] = val;
        }
      }
      $('div.panel-heading strong', this.jq).text(this.options.name);
      return $('div.panel-body', this.jq).html("<p><strong>Email: </strong>" + this.options.email + "</p><p><strong>Privilegio: </strong>" + this.options.privilegios + "</p><p><strong>Estado: </strong>" + this.options.estado + "</p>");
    };

    return User;

  })();

  $(document).ready(function() {
    var contentJq;
    contentJq = $('div.users-content');
    io.on('users:create', function(data) {
      var user;
      if (data.msg.tipo === 'exito') {
        user = new User(data.user);
        user.addTo(contentJq);
        allUsers[data.user._id] = user;
        console.log(data.userAction + '---' + globalUser);
        if (data.userAction !== globalUser) {
          data.msg.tipo = 'info';
          data.msg.titulo = 'Informacion';
          data.msg.texto = "El usuario <strong>" + data.userCreate + "</strong>a sido creado";
        }
        return new Alerta(data.msg);
      } else {
        if (data.userAction === globalUser) {
          return new Alerta(data.msg);
        }
      }
    });
    io.on('users:delete', function(data) {
      var el, msg;
      console.log(data);
      msg = data.msg;
      el = allUsers[data.id];
      el.jq.fadeOut('medium', function() {
        el.jq.remove();
        delete el;
        if (data.userAction !== globalUser) {
          msg.tipo = 'info';
          msg.titulo = 'Informacion';
          msg.texto = "!El usuario <strong>" + data.userDelete + "</strong> a sido eliminado.";
        }
        return new Alerta(msg);
      });
      if (data.userDelete === globalUser) {
        return setTimeout(function() {
          return window.location.replace('/');
        }, 2000);
      }
    });
    io.on('users:edit', function(data) {
      var user;
      user = allUsers[data.id];
      user.updateHtml(data.newData);
      if (data.userAction === globalUser) {
        new Alerta(data.msg);
      }
      if (data.useredit === globalUser) {
        data.msg.tipo = 'info';
        data.msg.titulo = 'Informacion';
        data.msg.texto = "!Tu cuenta a sido modificada el sistema se reiniciara.";
        new Alerta(data.msg);
        return setTimeout(function() {
          return window.location.replace('/');
        }, 2000);
      }
    });
    $('button#btn-addUser').on('click', function(e) {
      var addUserModal, val;
      addUserModal = new Modal({
        titulo: 'Nuevo - Usuario',
        tipo: 'formulario',
        contenido: formHtml('add'),
        despuesDeMostrar: function(jq) {
          return setTimeout(function() {
            return jq.find('input#name').focus();
          }, 800);
        }
      });
      return val = new Validador({
        formulario: addUserModal.jq.find('form'),
        procesarFormulario: function(jqForm) {
          return addUserModal.cerrar(function() {
            var dataUser;
            dataUser = serializeForm2(jqForm);
            return io.emit('users:create', {
              usuario: dataUser,
              userAction: globalUser,
              userCreate: dataUser.name
            });
          });
        }
      });
    });
    return $.ajax({
      url: '/users/getAll',
      jsonp: "callback",
      dataType: 'jsonp',
      success: function(users) {
        var i, user, useri, _j, _len1, _results;
        _results = [];
        for (i = _j = 0, _len1 = users.length; _j < _len1; i = ++_j) {
          useri = users[i];
          user = new User(useri);
          user.addTo(contentJq);
          _results.push(allUsers[useri._id] = user);
        }
        return _results;
      }
    });
  });

  headerTitleJq = $('h1#page-header');

  ctnMainJq = $('div#main-ctn');

  divRowsJq = ctnMainJq.find('div.row');

  lisJq = $('ul#side-menu li.tile div').on('click', function(e) {
    var elegidoJq, txt;
    e.preventDefault();
    divRowsJq.hide();
    lisJq.removeClass('clicki');
    txt = $.trim($(this).text());
    $(this).addClass('clicki');
    headerTitleJq.text(txt.toUpperCase());
    elegidoJq = ctnMainJq.find("div#" + txt + "-ctn");
    if (!elegidoJq.is(':visible')) {
      return elegidoJq.show();
    }
  });

  txt2 = $.trim($(lisJq[0]).text());

  headerTitleJq.text(txt2.toUpperCase());

  ctnMainJq.find("div#" + txt2 + "-ctn").show();

  Chat = (function() {
    function Chat(usersIn, inChat) {
      this.usersIn = usersIn;
      this.html = "<ul id='mi-chat' style='display:none;'> <button type='button' class='close' data-dismiss='modal' aria-hidden='true' style='margin-top: -10px;margin-right: -7px;'>x</button> <li> <button class='btn btn-primary btn-sm' style='width: 100%;'>Chat</button> </li> <div style='display:none;'> <li class='divider'></li> <li>Conectados: <strong id='conectados'>" + this.usersIn + "</strong></li> <li class='divider'><li> <li><div id='txtchat'></div></li> <li class='divider'></li> <li> <form class='form-horizontal'> <input type='text'  class='form-control' name='texto'> </form> </li> </div> </ul>";
    }

    Chat.prototype.addTo = function(jqEl) {
      this.jq = $(this.html).appendTo(jqEl);
      this.buttonJq = this.jq.find('button:last').on('click', (function(_this) {
        return function(e) {
          return _this.hideShowChat();
        };
      })(this));
      this.jq.find('button:first').on('click', (function(_this) {
        return function(e) {
          return _this.jq.hide();
        };
      })(this));
      this.conectadosJq = this.jq.find('strong#conectados');
      this.form = this.jq.find('form');
      this.txt = this.form.find('input:text');
      this.txtchatJq = this.jq.find('#txtchat');
      this.form.on('submit', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.sendMessage($.trim(_this.txt.val()));
        };
      })(this));
      return this.jdBlokLi = this.jq.find('div:first');
    };

    Chat.prototype.hideShowChat = function() {
      if (this.jdBlokLi.is(':visible')) {
        return this.jdBlokLi.hide((function(_this) {
          return function() {};
        })(this));
      } else {
        return this.jdBlokLi.show((function(_this) {
          return function() {
            _this.txtchatJq.scrollTop(1000000);
            return _this.txt.focus();
          };
        })(this));
      }
    };

    Chat.prototype.sendMessage = function(msg) {
      if (msg !== '') {
        return io.emit('users:addComment', {
          comment: {
            name: globalUser,
            msg: msg
          }
        });
      }
    };

    Chat.prototype.addComment = function(comment) {
      var contentHtml;
      contentHtml = "<p><strong>" + comment.name + ": </strong>" + comment.msg + "</p>";
      $(contentHtml).appendTo(this.txtchatJq);
      return this.txtchatJq.scrollTop(1000000);
    };

    Chat.prototype.updateUsersIn = function(usersObj) {
      var userObj, users, _j, _len1;
      users = [];
      for (_j = 0, _len1 = usersObj.length; _j < _len1; _j++) {
        userObj = usersObj[_j];
        if (usersObj.name !== globalUser) {
          users.push(userObj.name);
        }
      }
      return this.conectadosJq.text(users);
    };

    return Chat;

  })();

  $(document).ready(function() {
    var inChat;
    inChat = new Chat([], []);
    inChat.addTo($('div#page-wrapper'));
    $('a#chat-context').on('click', function() {
      if (inChat.jq.is(':visible')) {
        return inChat.jq.hide();
      } else {
        inChat.jq.show();
        inChat.jdBlokLi.show();
        return setTimeout(function() {
          return inChat.txt.focus();
        }, 0);
      }
    });
    io.emit('users:userIn', {
      userAction: globalUser
    });
    io.on('users:userIn', function(data) {
      inChat.updateUsersIn(data.usersIn);
      if (data.userAction === globalUser) {
        iva = data.iva;
        ivaJqVenta.val(iva);
        ivaCompraJq.val(iva);
        proveedores = data.proveedores;
        clientes = data.clientes;
        codprod = data.codprod * 1;
        codprod++;
        codigoComprasGlobalJq.val(getCodProd());
        NroFactura = data.NroFactura + 1;
        return NroRecibo = data.NroRecibo + 1;
      }
    });
    io.on('users:addComment', function(data) {
      if (inChat.jq.is(':visible')) {
        if (!inChat.jdBlokLi.is(':visible')) {
          inChat.buttonJq.effect('highlight', 800);
        }
        inChat.addComment(data.comment);
        if (data.comment.name === globalUser) {
          return inChat.txt.val('');
        }
      }
    });
    return $(window).on('beforeunload', function(e) {
			console.log('close nav');
			io.emit('users:userOut', {
				userAction: globalUser,
				closeNav:e
			});
		});
  });

  tablaVentasRep = void 0;

  $(window).on('load', function() {
    var ctnTablaVentasRepJq, ctnVentasRepJq, showHideMenujq, tablaVentasRepJq;
    ctnVentasRepJq = $('div#ventas');
    tablaVentasRepJq = ctnVentasRepJq.find('table#ventas-report');
    ctnTablaVentasRepJq = tablaVentasRepJq.parent();
    tablaVentasRep = tablaVentasRepJq.dataTable({
      "dom": '<"top"fl>t<"bottom"pi><"clear">',
      "language": {
        "search": "Buscar: ",
        "lengthMenu": "",
        "lengthMenu": "_MENU_",
        "zeroRecords": "Ningun registro encontrado",
        "info": "pagina _PAGE_ de _PAGES_",
        "infoEmpty": "Ningun Registro",
        "infoFiltered": "(fitrado de _MAX_ total registros)"
      },
      "ajax": '/ventas/getAll',
      "columns": [
        {
          "data": "_id"
        }, {
          "data": "fecha"
        }, {
          "data": "serie"
        }, {
          "data": "codigo"
        }, {
          "data": "descripcion"
        }, {
          "data": "costo"
        }, {
          "data": "cantidad"
        }, {
          "data": "utilidad"
        }, {
          "data": "garantia"
        }, {
          "data": "cliente"
        }, {
          "data": "proveedor"
        }, {
          "data": "tipoVenta"
        }, {
          "data": "precioVenta"
        }, {
          "data": "precio_recibo"
        }, {
          "data": "precio_factura"
        }
      ],
      "columnDefs": [
        {
          "visible": false,
          "targets": 0
        }, {
          "targets": 1,
          "visible": true,
          "createdCell": function(td, cellData, rowData, row, col) {
            var time;
            time = moment(cellData).format("DD/MMM/YYYY H:mm:ss");
            $(td).text(time);
            return rowData.fecha = time;
          }
        }, {
          "visible": true,
          "targets": 2
        }, {
          "targets": 3
        }, {
          "targets": 4
        }, {
          "visible": false,
          "targets": 5
        }, {
          "visible": true,
          "targets": 6
        }, {
          "visible": false,
          "targets": 7
        }, {
          "visible": false,
          "targets": 8
        }, {
          "visible": true,
          "targets": 9
        }, {
          "visible": false,
          "targets": 10
        }, {
          "visible": true,
          "targets": 11,
          "createdCell": function(td, cellData, rowData, row, col) {
            return $(td).addClass('selectable-td').html("<a href='javascript:;'>" + cellData + "</a>");
          }
        }, {
          "visible": true,
          "targets": 12
        }, {
          "visible": false,
          "targets": 13
        }, {
          "visible": false,
          "targets": 14
        }
      ],
      "order": [1, 'asc']
    });
    showHideMenujq = ctnVentasRepJq.find('div.show-hide-colms');
    $(document).ajaxComplete(function(event, xhr, settings) {
      tablaVentasRepJq.css('width', '');
      return showHideMenujq.show();
    });
    ctnVentasRepJq.find('ul.dropdown-cols input:checkbox').on('click', function(event) {
      var column;
      column = tablaVentasRep.api().column($(this).attr('data-column'));
      if ($(this).is(':checked')) {
        column.visible(true);
      } else {
        column.visible(false);
      }
      return tablaVentasRepJq.css('width', '');
    });
    return tablaVentasRepJq.on('click', 'a', function(ev) {
      return alert("generar: " + ($(this).text()));
    });
  });

  contEstaJq = $('div#estadisticas-ctn');

  drawEstadisticasVentas = function() {
    return $.ajax({
      url: '/estadisticas/estadisticaVentas/',
      type: 'GET',
      dataType: 'json',
      success: function(data) {
        var doPlot, _j, _len1, _ref;
        _ref = data.mayCompData;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          item.label = item.label + ' ' + item.data + ' Bs';
        }
        $.plot(contEstaJq.find("#flot-pie-chart"), data.mayCompData, {
          series: {
            pie: {
              show: true
            }
          },
          grid: {
            hoverable: true
          },
          tooltip: true,
          tooltipOpts: {
            content: "%p.0%, %s",
            shifts: {
              x: 20,
              y: 0
            },
            defaultTheme: false
          }
        });
        contEstaJq.find("b#est-utilidad").text(data.utilidadTotal);
        if (data.prodsMasVenData[0] != null) {
          contEstaJq.find("b#est-mas-vendido").html("<div>" + data.prodsMasVenData[0].descripcion + " con " + data.prodsMasVenData[0].cantidad + " Unidade(s)</div>");
        }
        contEstaJq.find("b#ventas-cobrar").text(data.ventasPorCobrar);
        console.log(data.ventasPorFecha);
        doPlot = function(position) {
          return $.plot($("#flot-chart-ventas"), [
            {
              data: data.ventasPorFecha,
              label: "Ventas",
              yaxis: 2
            }
          ], {
            xaxes: [
              {
                mode: 'time',
                timeformat: '%d/%m/%y %H:%M:%S'
              }
            ],
            yaxes: [
              {
                min: 0
              }, {
                alignTicksWithAxis: position === "right" ? 1 : null,
                position: position,
                tickFormatter: function(v, axis) {
                  return v.toFixed(axis.tickDecimals) + " Bs";
                }
              }
            ],
            legend: {
              position: 'sw'
            },
            grid: {
              hoverable: true
            },
            tooltip: true,
            tooltipOpts: {
              content: "%s para %x, %y",
              xDateFormat: "%d-%m-%y",
              onHover: function(flotItem, $tooltipEl) {}
            }
          });
        };
        return doPlot("right");
      }
    });
  };

  drawEstadisticasCompras = function() {
    return $.ajax({
      url: '/estadisticas/estadisticaCompras/',
      type: 'GET',
      dataType: 'json',
      success: function(data) {
        return contEstaJq.find("b#prod-almacen").text(data.prodsAlmacen);
      }
    });
  };

  $(window).on('load', function() {
    drawEstadisticasVentas();
    drawEstadisticasCompras();
    return contEstaJq.find('button#btn_est_fechas').on('click', function() {
      var modalEstfechas;
      return modalEstfechas = new Modal({
        titulo: 'Rango de Estadisticas',
        tipo: 'formulario',
        contenido: '<form class="form-horizontal"> <div class="form-group"> <label for="est_fecha_inicio" class="col-md-3  control-label">A partir de:</label> <div class="col-md-5"> <input type="text" class="form-control input-sm" id="est_fecha_inicio" name="est_fecha_inicio"> </div> </div> <div class="form-group"> <label for="est_fecha_final" class="col-md-3  control-label">Hasta:</label> <div class="col-md-5"> <input type="text" class="form-control input-sm" id="est_fecha_final" name="est_fecha_final"> </div> </div> </form>',
        antesDeMostrar: function(modalJq) {
          $('div.bootstrap-datetimepicker-widget').remove();
          modalJq.find('input:text:eq(0)').datetimepicker();
          return modalJq.find('input:text:eq(1)').datetimepicker();
        },
        despuesDeCerrar: function(modalJq) {}
      });
    });
  });

  $(window).on('load', function() {
    return $('button.btn-fullscreen').on('click', function(e) {
      var ctnDivParentJq;
      ctnDivParentJq = $(this).parent();
      if (ctnDivParentJq.attr('class') === 'row') {
        return ctnDivParentJq.addClass('full-screen');
      } else {
        return ctnDivParentJq.removeClass('full-screen');
      }
    });
  });

}).call(this);
