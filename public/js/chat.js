// Generated by CoffeeScript 1.8.0
(function() {
  var Chat;

  Chat = (function() {
    function Chat(usersIn, inChat) {
      this.usersIn = usersIn;
      this.html = "<ul id='mi-chat'> <li> <button class='btn btn-primary btn-sm' style='width: 100%;'>Chat</button> </li> <div style='display:none;'> <li class='divider'></li> <li>Conectados: <strong id='conectados'>" + this.usersIn + "</strong></li> <li class='divider'><li> <li><div id='txtchat'></div></li> <li class='divider'></li> <li> <form class='form-horizontal'> <input type='text'  class='form-control' name='texto'> </form> </li> </div> </ul>";
    }

    Chat.prototype.addTo = function(jqEl) {
      this.jq = $(this.html).appendTo(jqEl);
      this.buttonJq = this.jq.find('button').on('click', (function(_this) {
        return function(e) {
          return _this.hideShowChat();
        };
      })(this));
      this.conectadosJq = this.jq.find('strong#conectados');
      this.form = this.jq.find('form');
      this.txt = this.form.find('input:text');
      this.txtchatJq = this.jq.find('#txtchat');
      this.form.on('submit', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.sendMessage($.trim(_this.txt.val()));
        };
      })(this));
      return this.jdBlokLi = this.jq.find('div:first');
    };

    Chat.prototype.hideShowChat = function() {
      if (this.jdBlokLi.is(':visible')) {
        return this.jdBlokLi.hide((function(_this) {
          return function() {};
        })(this));
      } else {
        return this.jdBlokLi.show((function(_this) {
          return function() {
            _this.txtchatJq.scrollTop(1000000);
            return _this.txt.focus();
          };
        })(this));
      }
    };

    Chat.prototype.sendMessage = function(msg) {
      if (msg !== '') {
        return io.emit('users:addComment', {
          comment: {
            name: globalUser,
            msg: msg
          }
        });
      }
    };

    Chat.prototype.addComment = function(comment) {
      var contentHtml;
      contentHtml = "<p><strong>" + comment.name + ": </strong>" + comment.msg + "</p>";
      $(contentHtml).appendTo(this.txtchatJq);
      return this.txtchatJq.scrollTop(1000000);
    };

    Chat.prototype.updateUsersIn = function(usersObj) {
      var userObj, users, _i, _len;
      users = [];
      for (_i = 0, _len = usersObj.length; _i < _len; _i++) {
        userObj = usersObj[_i];
        if (usersObj.name !== globalUser) {
          users.push(userObj.name);
        }
      }
      return this.conectadosJq.text(users);
    };

    return Chat;

  })();

  $(window).on('load', function() {
    var inChat;
    inChat = new Chat([], []);
    inChat.addTo($('div#page-wrapper'));
    io.emit('users:userIn', {
      userAction: globalUser
    });
    io.on('users:userOut', function(data) {
      inChat.updateUsersIn(data.usersIn);
      return inChat.addComment(data.inChat);
    });
    io.on('users:userIn', function(data) {
      return inChat.updateUsersIn(data.usersIn);
    });
    io.on('users:addComment', function(data) {
      if (!inChat.jdBlokLi.is(':visible')) {
        inChat.buttonJq.effect('highlight', 800);
      }
      inChat.addComment(data.comment);
      if (data.comment.name === globalUser) {
        return inChat.txt.val('');
      }
    });
    return $(window).on('beforeunload', function(e) {
			io.emit('users:userOut', {
				userAction: globalUser,
				closeNav:true
			});
		});
  });

}).call(this);
